#ifndef __DISPLAY_H
#define __DISPLAY_H

typedef struct RenderArea {
    uint8_t col_start;
    uint8_t col_end;
    uint8_t page_start;
    uint8_t page_end;
    int buf_len;
} RenderArea;

// Display dimensions
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 32
#define DISPLAY_MAX_LINE_LEN 15 // 15 for margins; 16 can physically be fit but it looks bad

// Display i2c information
#define DISPLAY_I2C i2c1
#define DISPLAY_FREQ_KHZ 400
#define DISPLAY_ADDR 0x3C
#define DISPLAY_SDA 18
#define DISPLAY_SCL 19
#define DISPLAY_TIMEOUT_US 100000 // The time (in microseconds) before the display is considered unresponsive and no further updates are sent

// Datasheet: https://cdn-shop.adafruit.com/datasheets/DISPLAY.pdf
// Commands:
#define DISPLAY_SET_MEM_MODE         0x20
#define DISPLAY_SET_COL_ADDR         0x21
#define DISPLAY_SET_PAGE_ADDR        0x22
#define DISPLAY_SET_HORIZ_SCROLL     0x26
#define DISPLAY_SET_SCROLL           0x2E

#define DISPLAY_SET_DISP_START_LINE  0x40

#define DISPLAY_SET_CONTRAST         0x81
#define DISPLAY_SET_CHARGE_PUMP      0x8D

#define DISPLAY_SET_SEG_REMAP        0xA0
#define DISPLAY_SET_ENTIRE_ON        0xA4
#define DISPLAY_SET_ALL_ON           0xA5
#define DISPLAY_SET_NORM_DISP        0xA6
#define DISPLAY_SET_INV_DISP         0xA7
#define DISPLAY_SET_MUX_RATIO        0xA8
#define DISPLAY_SET_DISP             0xAE
#define DISPLAY_SET_COM_OUT_DIR      0xC0
#define DISPLAY_SET_COM_OUT_DIR_FLIP 0xC0

#define DISPLAY_SET_DISP_OFFSET      0xD3
#define DISPLAY_SET_DISP_CLK_DIV     0xD5
#define DISPLAY_SET_PRECHARGE        0xD9
#define DISPLAY_SET_COM_PIN_CFG      0xDA
#define DISPLAY_SET_VCOM_DESEL       0xDB

#define DISPLAY_PAGE_HEIGHT          8
#define DISPLAY_NUM_PAGES            (DISPLAY_HEIGHT / DISPLAY_PAGE_HEIGHT)
#define DISPLAY_BUF_LEN              (DISPLAY_NUM_PAGES * DISPLAY_WIDTH)

#define DISPLAY_WRITE_MODE           0xFE
#define DISPLAY_READ_MODE            0xFF

static uint8_t font[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Space
    0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // !
    0x00, 0x07, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00,  // " notdone
    0x14, 0x7f, 0x14, 0x7f, 0x14, 0x00, 0x00, 0x00,  // # notdone
    0x24, 0x2a, 0x7f, 0x2a, 0x12, 0x00, 0x00, 0x00,  // $ notdone
    0x62, 0x64, 0x08, 0x13, 0x23, 0x36, 0x00, 0x00,  // % notdone
    0x00, 0x41, 0x36, 0x49, 0x56, 0x72, 0x00, 0x00,  // & notdone
    0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00,  // ' notdone
    0x00, 0x1c, 0x22, 0x41, 0x00, 0x00, 0x00, 0x00,  // ( notdone
    0x00, 0x41, 0x22, 0x1c, 0x00, 0x00, 0x00, 0x00,  // ) notdone
    0x08, 0x2a, 0x1c, 0x2a, 0x08, 0x00, 0x00, 0x00,  // * notdone
    0x08, 0x08, 0x3e, 0x08, 0x08, 0x00, 0x00, 0x00,  // + notdone
    0x00, 0x00, 0x00, 0x50, 0x30, 0x00, 0x00, 0x00,  // , notdone
    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,  // -
    0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00,  // .
    0x00, 0x20, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00,  // /
    0x3e, 0x41, 0x41, 0x49, 0x41, 0x41, 0x3e, 0x00,  // 0
    0x00, 0x00, 0x42, 0x7f, 0x40, 0x00, 0x00, 0x00,  // 1
    0x30, 0x49, 0x49, 0x49, 0x49, 0x46, 0x00, 0x00,  // 2
    0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x36, 0x00,  // 3
    0x3f, 0x20, 0x20, 0x78, 0x20, 0x20, 0x00, 0x00,  // 4
    0x4f, 0x49, 0x49, 0x49, 0x49, 0x30, 0x00, 0x00,  // 5
    0x3f, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0c, 0x00,  // 6
    0x01, 0x01, 0x01, 0x61, 0x31, 0x0d, 0x03, 0x00,  // 7
    0x36, 0x49, 0x49, 0x49, 0x49, 0x49, 0x36, 0x00,  // 8
    0x06, 0x09, 0x09, 0x09, 0x09, 0x09, 0x7f, 0x00,  // 9
    0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // :
    0x40, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ;
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // < notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // = notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // > notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ? notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // @ notdone
    0x78, 0x14, 0x12, 0x11, 0x12, 0x14, 0x78, 0x00,  // A
    0x7f, 0x49, 0x49, 0x49, 0x49, 0x49, 0x7f, 0x00,  // B
    0x7e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00,  // C
    0x7f, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7e, 0x00,  // D
    0x7f, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x00,  // E
    0x7f, 0x09, 0x09, 0x09, 0x09, 0x01, 0x01, 0x00,  // F
    0x7f, 0x41, 0x41, 0x41, 0x51, 0x51, 0x73, 0x00,  // G
    0x7f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x7f, 0x00,  // H
    0x00, 0x41, 0x41, 0x7f, 0x41, 0x41, 0x00, 0x00,  // I
    0x21, 0x41, 0x41, 0x3f, 0x01, 0x01, 0x01, 0x00,  // J
    0x00, 0x7f, 0x08, 0x08, 0x14, 0x22, 0x41, 0x00,  // K
    0x7f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00,  // L
    0x7f, 0x02, 0x04, 0x08, 0x04, 0x02, 0x7f, 0x00,  // M
    0x7f, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7f, 0x00,  // N
    0x3e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3e, 0x00,  // O
    0x7f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00,  // P
    0x3e, 0x41, 0x41, 0x49, 0x51, 0x61, 0x7e, 0x00,  // Q
    0x7f, 0x11, 0x11, 0x11, 0x31, 0x51, 0x0e, 0x00,  // R
    0x46, 0x49, 0x49, 0x49, 0x49, 0x30, 0x00, 0x00,  // S
    0x01, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x01, 0x00,  // T
    0x3f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3f, 0x00,  // U
    0x0f, 0x10, 0x20, 0x40, 0x20, 0x10, 0x0f, 0x00,  // V
    0x7f, 0x20, 0x10, 0x08, 0x10, 0x20, 0x7f, 0x00,  // W
    0x00, 0x41, 0x22, 0x14, 0x14, 0x22, 0x41, 0x00,  // X
    0x01, 0x02, 0x04, 0x78, 0x04, 0x02, 0x01, 0x00,  // Y
    0x41, 0x61, 0x59, 0x45, 0x43, 0x41, 0x00, 0x00,  // Z
    0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x00,  // [ notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // \ notdone
    0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x00,  // ] notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ^ notdone
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00,  // _
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ` notdone
    0x78, 0x14, 0x12, 0x11, 0x12, 0x14, 0x78, 0x00,  // A
    0x7f, 0x49, 0x49, 0x49, 0x49, 0x49, 0x7f, 0x00,  // B
    0x7e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x00,  // C
    0x7f, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7e, 0x00,  // D
    0x7f, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x00,  // E
    0x7f, 0x09, 0x09, 0x09, 0x09, 0x01, 0x01, 0x00,  // F
    0x7f, 0x41, 0x41, 0x41, 0x51, 0x51, 0x73, 0x00,  // G
    0x7f, 0x08, 0x08, 0x08, 0x08, 0x08, 0x7f, 0x00,  // H
    0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00,  // I
    0x21, 0x41, 0x41, 0x3f, 0x01, 0x01, 0x01, 0x00,  // J
    0x00, 0x7f, 0x08, 0x08, 0x14, 0x22, 0x41, 0x00,  // K
    0x7f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00,  // L
    0x7f, 0x02, 0x04, 0x08, 0x04, 0x02, 0x7f, 0x00,  // M
    0x7f, 0x02, 0x04, 0x08, 0x10, 0x20, 0x7f, 0x00,  // N
    0x3e, 0x41, 0x41, 0x41, 0x41, 0x41, 0x3e, 0x00,  // O
    0x7f, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e, 0x00,  // P
    0x3e, 0x41, 0x41, 0x49, 0x51, 0x61, 0x7e, 0x00,  // Q
    0x7f, 0x11, 0x11, 0x11, 0x31, 0x51, 0x0e, 0x00,  // R
    0x46, 0x49, 0x49, 0x49, 0x49, 0x30, 0x00, 0x00,  // S
    0x01, 0x01, 0x01, 0x7f, 0x01, 0x01, 0x01, 0x00,  // T
    0x3f, 0x40, 0x40, 0x40, 0x40, 0x40, 0x3f, 0x00,  // U
    0x0f, 0x10, 0x20, 0x40, 0x20, 0x10, 0x0f, 0x00,  // V
    0x7f, 0x20, 0x10, 0x08, 0x10, 0x20, 0x7f, 0x00,  // W
    0x00, 0x41, 0x22, 0x14, 0x14, 0x22, 0x41, 0x00,  // X
    0x01, 0x02, 0x04, 0x78, 0x04, 0x02, 0x01, 0x00,  // Y
    0x41, 0x61, 0x59, 0x45, 0x43, 0x41, 0x00, 0x00,  // Z
    0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x00,  // { notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // | notdone
    0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x00, 0x00,  // } notdone
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ~ notdone
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  // â–  (255)
};

static uint8_t logo[] = {
    0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1e,
    0x3e, 0x3e, 0x3e, 0x7c, 0x7c, 0x7c, 0xf8, 0xf8,
    0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x70, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xe0, 0x70, 0x10, 0x10, 0x10, 0x00, 0xa0,
    0xf0, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x1c, 0x3e, 0x3e, 0x3e, 0x3e, 0x1c, 0x1c, 0x1c,
    0x4c, 0x68, 0x68, 0xc0, 0xc0, 0x00, 0x00, 0x81,
    0x81, 0x03, 0x01, 0x05, 0x1d, 0x09, 0xa0, 0xfc,
    0xfc, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c,
    0x06, 0x03, 0x02, 0x03, 0x06, 0xae, 0xfc, 0xa0,
    0x00, 0x00, 0x48, 0xff, 0x54, 0x00, 0x00, 0x00,
    0xf8, 0xdc, 0x06, 0x03, 0x02, 0x03, 0x02, 0x03,
    0x04, 0x00, 0x00, 0xf8, 0xfc, 0x0e, 0x02, 0x03,
    0x03, 0x02, 0x06, 0xbe, 0xf8, 0x40, 0x00, 0x00,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x03,
    0x4b, 0xff, 0x57, 0x02, 0x03, 0x02, 0x00, 0x24,
    0xff, 0x5e, 0x02, 0x03, 0x02, 0x03, 0x06, 0x0e,
    0xfc, 0xf0, 0x00, 0x00, 0x03, 0x7f, 0xf8, 0x80,
    0x00, 0xf8, 0x5e, 0x07, 0xbe, 0xf0, 0x00, 0xc0,
    0xf8, 0x3f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x38, 0x7c, 0x78, 0x70, 0xf8, 0xe0, 0xe8, 0xd0,
    0xc0, 0xe0, 0x00, 0x00, 0x00, 0x06, 0x03, 0x01,
    0x38, 0x78, 0x30, 0x80, 0xe0, 0x80, 0x00, 0x00,
    0x07, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0f,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x07, 0x03, 0x00,
    0x00, 0x00, 0x02, 0x0f, 0x05, 0x00, 0x00, 0x00,
    0x03, 0x07, 0x06, 0x0c, 0x08, 0x0c, 0x08, 0x0c,
    0x04, 0x00, 0x00, 0x01, 0x07, 0x06, 0x0c, 0x08,
    0x0c, 0x08, 0x0e, 0x07, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x0f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x05,
    0x0f, 0x07, 0x04, 0x0c, 0x08, 0x0c, 0x0c, 0x07,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f,
    0x0f, 0x01, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x0e,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

    0xf0, 0xf0, 0xf0, 0xe0, 0x00, 0x00, 0x01, 0x03,
    0x07, 0x7f, 0xff, 0xf8, 0xf2, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x7c, 0xff, 0xff, 0xff, 0x7c, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x7c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

/**
 * Initializes the display.
 * @return true if the display was initialized successfully, false otherwise.
*/
bool display_init();

/**
 * Gets the string representation of a progress bar to be displayed on the display (as text).
 * @param bar The array to store the progress bar string in
 * @param progress The progress to display (0-100)
 * @note The length of bar[] should be of DISPLAY_MAX_LINE_LEN
*/
void display_pBarStr(char bar[], uint progress);

/**
 * Renders text on the display.
 * @param l1 The first line of text
 * @param l2 The second line of text
 * @param l3 The third line of text
 * @param l4 The fourth line of text
 * @param center Whether to center the text (false leaves it as-is)
 * @note The display supports 4 lines of text, with a maximum of ~14-16 characters per line.
 * Any more characters will be truncated.
*/
void display_text(char l1[], char l2[], char l3[], char l4[], bool center);

#endif // __DISPLAY_H