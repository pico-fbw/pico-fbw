# This file utilizes code under the MIT License. See "LICENSE" for details.
# ESP-IDF installation setps sourced from: https://github.com/rmshub/esp-idf-action

name: Build

# TODO: seperate workflow for main that will build for release and auto upload artifacts
# and also run FBW_FORMAT for clang-tidy (on tag push)

on:
  push:
    branches: [ "main", "beta", "alpha" ]
  pull_request:
    branches: [ "main", "beta", "alpha" ]
  workflow_dispatch:

env:
  # Debug build will enable more warnings
  BUILD_TYPE: Debug
  PICO_SDK_PATH: ${{github.workspace}}/pico-sdk
  ESP_IDF_VERSION: v5.2

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        PLATFORM: [ pico, pico_w, esp32 ]

    steps:
    - name: Checkout pico-fbw
      uses: actions/checkout@v4.1.1
      with:
        submodules: 'recursive'

    - name: Set up Ninja
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.11.1

    - name: Check cache (esp)
      if: matrix.PLATFORM == 'esp32'
      id: esp-idf-cache
      uses: actions/cache@v3
      with:
        path: |
          ~/esp/esp-idf
          ~/.espressif
        key: ${{runner.os}}-esp-idf-${{hashFiles('.github/workflows/esp-idf_install.sh')}}-${{env.ESP_IDF_VERSION}}

    - name: Prepare (pico)
      if: matrix.PLATFORM == 'pico' || matrix.PLATFORM == 'pico_w'
      uses: Fortinbra/RaspberryPiPicoBuild@v3
    
    - name: Prepare (esp)
      if: matrix.PLATFORM == 'esp32'
      shell: bash
      run: |
          set -e
          if echo ${{ steps.esp-idf-cache.outputs.cache-hit }} | grep -c "true"
          then 
            echo "Cache hit - skipping dependency installation"
          else
            sh ${{github.workspace}}/.github/workflows/esp-idf_install.sh ${{env.ESP_IDF_VERSION}}
          fi

    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo | grep processor | wc -l

    - name: Configure CMake
      if: matrix.PLATFORM != 'esp32'
      shell: bash
      run: cmake -B ${{github.workspace}}/build -DFBW_PLATFORM=${{matrix.PLATFORM}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja
    
    - name: Configure CMake (esp)
      if: matrix.PLATFORM == 'esp32'
      shell: bash
      run: source ~/esp/esp-idf/export.sh && 
        cmake -B ${{github.workspace}}/build -DFBW_PLATFORM=${{matrix.PLATFORM}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -GNinja

    - name: Build
      if: matrix.PLATFORM != 'esp32'
      shell: bash
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}}

    - name: Build (esp)
      if: matrix.PLATFORM == 'esp32'
      shell: bash
      run: source ~/esp/esp-idf/export.sh && 
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}}
